
import unittest
import numpy as np
from gconcord.graphical_concord_ import GraphicalConcord, GraphicalConcordCV

x = np.array([[-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708],
                  [ 0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861],
                  [ 0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883],
                  [ 0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917],
                  [-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266],
                  [-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894],
                  [ 0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444],
                  [-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685],
                  [-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656],
                  [-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063],
                  [ 1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778],
                  [ 0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537]])

S = np.cov(x, rowvar = False)
lam1 = 0.2
lam2 = 0.05


class GconcordTestCase(unittest.TestCase):
        
    def testIsta(self):
        model = GraphicalConcord(lam1 = lam1, lam2 = lam2, method = "ista")
        omega = model.fit(x).omega
        ans = np.array([[ 1.521808, -0.428711,  0.000000,  0.000000,  0.000000,  0.000000],
                        [-0.428711,  3.076337,  0.000000,  0.283424,  0.000000,  0.000000],
                        [ 0.000000,  0.000000,  1.774255, -0.670256,  0.000000, -0.100537],
                        [ 0.000000,  0.283424, -0.670256,  0.956787, -0.094546,  0.000000],
                        [ 0.000000,  0.000000,  0.000000, -0.094546,  1.294970, -0.536385],
                        [ 0.000000,  0.000000, -0.100537,  0.000000, -0.536385,  1.026583]])
        self.assertEqual(np.sum(abs(omega.round(6) - ans)), 0.0)
        
    def testIstaCV(self):
        cv = GraphicalConcordCV(method = "ista")
        res = cv.fit(x)
        self.assertEqual(np.sum(abs(np.array([round(res.lam1,6) - 0.160776, round(res.lam2, 6) - 2.531320]))), 0.0)
        
    def testFista(self):
        model = GraphicalConcord(lam1 = lam1, lam2 = lam2, method = "fista")
        omega = model.fit(x).omega
        ans = np.array([[ 1.521808, -0.428711,  0.000000,  0.000000,  0.000000,  0.000000],
                        [-0.428711,  3.076337,  0.000000,  0.283426,  0.000000,  0.000000],
                        [ 0.000000,  0.000000,  1.774257, -0.670263,  0.000000, -0.100537],
                        [ 0.000000,  0.283426, -0.670263,  0.956788, -0.094546,  0.000000],
                        [ 0.000000,  0.000000,  0.000000, -0.094546,  1.294970, -0.536390],
                        [ 0.000000,  0.000000, -0.100537,  0.000000, -0.536390,  1.026584]])
        self.assertEqual(np.sum(abs(omega.round(6) - ans)), 0.0)
        
    def testFistaCV(self):
        cv = GraphicalConcordCV(method = "fista")
        res = cv.fit(x)
        self.assertEqual(np.sum(abs(np.array([round(res.lam1,6) - 0.160776, round(res.lam2,6) - 2.531320]))), 0.0)
        
    def testCwd(self):
        model = GraphicalConcord(lam1 = lam1, lam2 = lam2, method = "coordinatewise")
        omega = model.fit(x).omega
        ans = np.array([[ 1.521808, -0.428711,  0.000000,  0.000000,  0.000000,  0.000000],
                        [-0.428711,  3.076337,  0.000000,  0.283426,  0.000000,  0.000000],
                        [ 0.000000,  0.000000,  1.774256, -0.670263,  0.000000, -0.100538],
                        [ 0.000000,  0.283426, -0.670263,  0.956788, -0.094547,  0.000000],
                        [ 0.000000,  0.000000,  0.000000, -0.094547,  1.294968, -0.536387],
                        [ 0.000000,  0.000000, -0.100538,  0.000000, -0.536387,  1.026582]])
        self.assertEqual(np.sum(abs(omega.round(6) - ans)), 0.0)
        
    def testCwdCV(self):
        cv = GraphicalConcordCV(method = "coordinatewise")
        res = cv.fit(x)
        self.assertEqual(np.sum(abs(np.array([round(res.lam1,6) - 0.160776, round(res.lam2,6) - 2.531320]))), 0.0)


if __name__ == '__main__':
    unittest.main()